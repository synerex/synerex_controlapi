// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nodeserv_controlapi.proto

package synerex_nodeserv_controlapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NodeInfo struct {
	NodeId               int32    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5d931e58fe526e3, []int{0}
}

func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type NodeServInfo struct {
	Provider             *NodeInfo `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Server               *NodeInfo `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeServInfo) Reset()         { *m = NodeServInfo{} }
func (m *NodeServInfo) String() string { return proto.CompactTextString(m) }
func (*NodeServInfo) ProtoMessage()    {}
func (*NodeServInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5d931e58fe526e3, []int{1}
}

func (m *NodeServInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeServInfo.Unmarshal(m, b)
}
func (m *NodeServInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeServInfo.Marshal(b, m, deterministic)
}
func (m *NodeServInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeServInfo.Merge(m, src)
}
func (m *NodeServInfo) XXX_Size() int {
	return xxx_messageInfo_NodeServInfo.Size(m)
}
func (m *NodeServInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeServInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeServInfo proto.InternalMessageInfo

func (m *NodeServInfo) GetProvider() *NodeInfo {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *NodeServInfo) GetServer() *NodeInfo {
	if m != nil {
		return m.Server
	}
	return nil
}

type NodeServInfos struct {
	Infos                []*NodeServInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NodeServInfos) Reset()         { *m = NodeServInfos{} }
func (m *NodeServInfos) String() string { return proto.CompactTextString(m) }
func (*NodeServInfos) ProtoMessage()    {}
func (*NodeServInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5d931e58fe526e3, []int{2}
}

func (m *NodeServInfos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeServInfos.Unmarshal(m, b)
}
func (m *NodeServInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeServInfos.Marshal(b, m, deterministic)
}
func (m *NodeServInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeServInfos.Merge(m, src)
}
func (m *NodeServInfos) XXX_Size() int {
	return xxx_messageInfo_NodeServInfos.Size(m)
}
func (m *NodeServInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeServInfos.DiscardUnknown(m)
}

var xxx_messageInfo_NodeServInfos proto.InternalMessageInfo

func (m *NodeServInfos) GetInfos() []*NodeServInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type NodePair struct {
	ProviderNodeId       int32    `protobuf:"varint,1,opt,name=provider_node_id,json=providerNodeId,proto3" json:"provider_node_id,omitempty"`
	ServerNodeId         int32    `protobuf:"varint,2,opt,name=server_node_id,json=serverNodeId,proto3" json:"server_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodePair) Reset()         { *m = NodePair{} }
func (m *NodePair) String() string { return proto.CompactTextString(m) }
func (*NodePair) ProtoMessage()    {}
func (*NodePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5d931e58fe526e3, []int{3}
}

func (m *NodePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodePair.Unmarshal(m, b)
}
func (m *NodePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodePair.Marshal(b, m, deterministic)
}
func (m *NodePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePair.Merge(m, src)
}
func (m *NodePair) XXX_Size() int {
	return xxx_messageInfo_NodePair.Size(m)
}
func (m *NodePair) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePair.DiscardUnknown(m)
}

var xxx_messageInfo_NodePair proto.InternalMessageInfo

func (m *NodePair) GetProviderNodeId() int32 {
	if m != nil {
		return m.ProviderNodeId
	}
	return 0
}

func (m *NodePair) GetServerNodeId() int32 {
	if m != nil {
		return m.ServerNodeId
	}
	return 0
}

type Response struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5d931e58fe526e3, []int{4}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*NodeInfo)(nil), "nodeservcontrolapi.NodeInfo")
	proto.RegisterType((*NodeServInfo)(nil), "nodeservcontrolapi.NodeServInfo")
	proto.RegisterType((*NodeServInfos)(nil), "nodeservcontrolapi.NodeServInfos")
	proto.RegisterType((*NodePair)(nil), "nodeservcontrolapi.NodePair")
	proto.RegisterType((*Response)(nil), "nodeservcontrolapi.Response")
}

func init() { proto.RegisterFile("nodeserv_controlapi.proto", fileDescriptor_d5d931e58fe526e3) }

var fileDescriptor_d5d931e58fe526e3 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0x86, 0x69, 0xf9, 0xe8, 0x57, 0x07, 0x24, 0x66, 0x0f, 0x58, 0xab, 0x87, 0xda, 0x78, 0xe8,
	0x69, 0x31, 0x68, 0x8c, 0x67, 0x8d, 0x31, 0x24, 0x06, 0xb5, 0xdc, 0xb8, 0x34, 0x85, 0x2e, 0xd0,
	0x00, 0xdd, 0x66, 0xb7, 0x45, 0xb9, 0xf8, 0x73, 0xfc, 0x9d, 0x66, 0x77, 0x59, 0xd4, 0x08, 0xe1,
	0xd4, 0xdd, 0x99, 0x67, 0xde, 0x7d, 0x67, 0xa6, 0x70, 0x92, 0xd1, 0x84, 0x70, 0xc2, 0x96, 0xd1,
	0x88, 0x66, 0x05, 0xa3, 0xf3, 0x38, 0x4f, 0x71, 0xce, 0x68, 0x41, 0x11, 0xd2, 0xa9, 0xef, 0x8c,
	0x7b, 0x3a, 0xa1, 0x74, 0x32, 0x27, 0x6d, 0x49, 0x0c, 0xcb, 0x71, 0x9b, 0x2c, 0xf2, 0x62, 0xa5,
	0x0a, 0xfc, 0x67, 0xb0, 0x7b, 0x34, 0x21, 0xdd, 0x6c, 0x4c, 0xd1, 0x31, 0xfc, 0x17, 0xe5, 0x51,
	0x9a, 0x38, 0x86, 0x67, 0x04, 0xb5, 0xd0, 0x12, 0xd7, 0x6e, 0x82, 0x10, 0xfc, 0xcb, 0xe2, 0x05,
	0x71, 0x4c, 0xcf, 0x08, 0x0e, 0x42, 0x79, 0x46, 0x2d, 0xb0, 0x78, 0x11, 0x17, 0x25, 0x77, 0xaa,
	0x32, 0xba, 0xbe, 0xf9, 0x1f, 0xd0, 0x10, 0x82, 0x7d, 0xc2, 0x96, 0x52, 0xf4, 0x16, 0xec, 0x9c,
	0xd1, 0x65, 0x9a, 0x10, 0x26, 0x55, 0xeb, 0x9d, 0x33, 0xfc, 0xd7, 0x24, 0xd6, 0x26, 0xc2, 0x0d,
	0x8d, 0xae, 0xc1, 0x12, 0x10, 0x61, 0xf2, 0xdd, 0x7d, 0x75, 0x6b, 0xd6, 0x7f, 0x84, 0xc3, 0x9f,
	0xef, 0x73, 0x74, 0x03, 0xb5, 0x54, 0x1c, 0x1c, 0xc3, 0xab, 0x06, 0xf5, 0x8e, 0xb7, 0x4b, 0x45,
	0x57, 0x84, 0x0a, 0xf7, 0x07, 0x6a, 0x32, 0x2f, 0x71, 0xca, 0x50, 0x00, 0x47, 0xda, 0x56, 0xf4,
	0x7b, 0x44, 0x4d, 0x1d, 0xef, 0xa9, 0x51, 0x5d, 0x40, 0x53, 0x19, 0xd9, 0x70, 0xa6, 0xe4, 0x1a,
	0x2a, 0xaa, 0x28, 0xdf, 0x05, 0x3b, 0x24, 0x3c, 0xa7, 0x19, 0x27, 0xa8, 0x09, 0x26, 0x9d, 0x49,
	0x35, 0x3b, 0x34, 0xe9, 0xac, 0xf3, 0x69, 0x40, 0x5d, 0x60, 0xf7, 0xca, 0x1e, 0xea, 0x02, 0xbc,
	0x96, 0x84, 0xad, 0x54, 0x37, 0x2d, 0xac, 0xb6, 0x89, 0xf5, 0x36, 0xf1, 0x83, 0xd8, 0xa6, 0x7b,
	0xbe, 0xaf, 0x2d, 0xee, 0x57, 0xd0, 0x13, 0x34, 0xfa, 0x6f, 0x69, 0x31, 0x9a, 0xf6, 0xa5, 0x19,
	0xb4, 0x73, 0xa2, 0xa2, 0x69, 0x77, 0x6b, 0x56, 0xdb, 0xf6, 0x2b, 0x77, 0x97, 0x03, 0x3c, 0x49,
	0x8b, 0x69, 0x39, 0xc4, 0x23, 0xba, 0x68, 0xf3, 0x55, 0x46, 0x18, 0x79, 0xd7, 0xdf, 0x68, 0xcb,
	0x3f, 0x3a, 0xb4, 0xa4, 0xe9, 0xab, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x5b, 0x06, 0x9c,
	0xc1, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeControlClient is the client API for NodeControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeControlClient interface {
	// get connection info (synerex server and provider)
	QueryInfos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NodeServInfos, error)
	// change relations between provider and synerex server
	SwitchServer(ctx context.Context, in *NodePair, opts ...grpc.CallOption) (*Response, error)
}

type nodeControlClient struct {
	cc *grpc.ClientConn
}

func NewNodeControlClient(cc *grpc.ClientConn) NodeControlClient {
	return &nodeControlClient{cc}
}

func (c *nodeControlClient) QueryInfos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NodeServInfos, error) {
	out := new(NodeServInfos)
	err := c.cc.Invoke(ctx, "/nodeservcontrolapi.NodeControl/QueryInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeControlClient) SwitchServer(ctx context.Context, in *NodePair, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/nodeservcontrolapi.NodeControl/SwitchServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeControlServer is the server API for NodeControl service.
type NodeControlServer interface {
	// get connection info (synerex server and provider)
	QueryInfos(context.Context, *empty.Empty) (*NodeServInfos, error)
	// change relations between provider and synerex server
	SwitchServer(context.Context, *NodePair) (*Response, error)
}

// UnimplementedNodeControlServer can be embedded to have forward compatible implementations.
type UnimplementedNodeControlServer struct {
}

func (*UnimplementedNodeControlServer) QueryInfos(ctx context.Context, req *empty.Empty) (*NodeServInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInfos not implemented")
}
func (*UnimplementedNodeControlServer) SwitchServer(ctx context.Context, req *NodePair) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchServer not implemented")
}

func RegisterNodeControlServer(s *grpc.Server, srv NodeControlServer) {
	s.RegisterService(&_NodeControl_serviceDesc, srv)
}

func _NodeControl_QueryInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControlServer).QueryInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservcontrolapi.NodeControl/QueryInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControlServer).QueryInfos(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeControl_SwitchServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeControlServer).SwitchServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeservcontrolapi.NodeControl/SwitchServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeControlServer).SwitchServer(ctx, req.(*NodePair))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodeservcontrolapi.NodeControl",
	HandlerType: (*NodeControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryInfos",
			Handler:    _NodeControl_QueryInfos_Handler,
		},
		{
			MethodName: "SwitchServer",
			Handler:    _NodeControl_SwitchServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeserv_controlapi.proto",
}
