syntax = "proto3";

package nodeservcontrolapi;
option go_package="github.com/synerex/synerex_nodeserv_controlapi";

service NodeControl {
    rpc QueryNodeInfos(NodeInfoFilter) returns (NodeInfos){}
    rpc ControlNodes(Order) returns (Response){}
}

message NodeInfoFilter {
    NodeType nodeType = 1; // default: all
    int32 cluster_id = 2;
    string area_id = 3;
    string version = 4;
}

enum NodeType {
   SERVER = 0;
   PROVIDER = 1;
   GATEWAY = 2;
}

message NodeInfo{
    string node_name = 1;
    NodeType node_type = 2; // node is provider/server/gateway?
    string server_info = 3; // for synerex servers/gateways
    string node_pbase_version = 4; // which protocol base version
    int32 with_node_id = 5;  // for reconnection with previous node_id (usually -1)
    int32 cluster_id = 6; //
    string area_id = 7; // for area definition
    repeated uint32 channelTypes = 8; // used channel list
    string gw_info = 9; // for gateway information
    int32 node_id = 10;
    int32 server_id = 11;
}

message NodeInfos {
    repeated NodeInfo infos = 1;
}

message Order {
    NodeInfo targetNode = 1;
    OrderType orderType = 2;
    oneof orderInfo {
        SwitchInfo switchInfo = 3;
    }
}

enum OrderType {
    SWITCH_SERVER = 0;
}

message SwitchInfo {
    NodeInfo sxServer = 1;
}

message Response {
    bool ok = 1;
}
